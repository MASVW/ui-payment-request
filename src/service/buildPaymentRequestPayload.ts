import dayjs from "dayjs";
type FormItem = {
    no: any,
    createDate: Date,
    type: string,
    means: string,
    currencies: string,
    status: string,
    reqPayment: string,
    postDate: string,
    outgoingNum: string,
    coaSelect: string,
    coaInput: string,
    bpCodeSelect: string,
    bpCodeInput: string,
    bankAccSelect: string,
    bankAccInput: string,
    checkNo: string,
    receiveNo: string,
    remarks: string,
    approval: string
};

type CollectionItem = {
    invoiceNo: string,
    invoiceAmount: string,
    cashDisc: string,
    paymentAmount: string,
    accNo: string,
    accName: string,
    vendorRef: string,
    invoiceDue: string,
    invoiceEntry: number,
    invType: string,
    invoiceCurr: string,
    noFPK: string,
    plant: string,
    mesin: string,
    dept: string,
    remarkDetail: string,
    proj: string,
    d4: string,
    d5: string,
    wTaxAmount: string
};

type CollectionData = CollectionItem[];

export function buildPaymentRequestPayload(form: FormItem, collection: CollectionData) {
  return {
    DocNum: null,
    Period: null,
    Instance: null,
    Series: null,
    Handwrtten: "N",
    Status: "O",
    RequestStatus: "W",
    Creator: "",        
    Remark: form.remarks,
    Canceled: "N",
    Object: "UDO_PAY_REQ",
    LogInst: null,
    UserSign: null,
    Transfered: "N",
    CreateDate: form.createDate,
    CreateTime: dayjs().format('HH:mm:ss'),         
    UpdateDate: null,
    UpdateTime: null,
    DataSource: "S",        
    U_SERRIESNAME: "BK102", //NO PLAT BK 
    U_TYPE: form.type,
    U_PAYMEANS: form.means,
    U_COA: form.coaSelect,
    U_BANKACCCOMP: form.bankAccSelect,
    U_BANKACC: form.bankAccInput || null,
    U_BPCODE: form.bpCodeSelect,
    U_COANAME: form.coaInput,
    U_BANKNAME: form.bankAccInput,
    U_BPNAME: form.bpCodeInput,
    U_REVACCNO: null,
    U_REVACCBANKNM: null,
    U_REVACCNM: null,
    U_STATUS: "NEW", //Wajib ada isi (form.u_status)
    U_TOTALPAY: collection.reduce((a, b) => a + (parseFloat(b.paymentAmount) || 0), 0), //CHECK
    U_GRANDTOTAL: collection.reduce((a, b) => a + (parseFloat(b.paymentAmount) || 0), 0), //CHECK
    U_NOTES: form.remarks,
    U_NOTESAPP: null,
    U_OUTPAYNO: form.outgoingNum,
    U_CREATEDT: form.createDate,
    U_REQPAYDT: form.reqPayment,
    U_POSTDT: form.postDate,
    U_CHECKNO: form.checkNo || null,
    U_OUTPAYENTRY: null,
    U_PAYCURR: form.currencies,
    U_DOCRATE: 0,
    U_BANKCHARGE: 0,
    U_TOTALLEVELAPP: 0,
    U_STSAPP: null,
    U_VDADD: "Y",
    U_ISPAY: null,
    U_COAPAY: null,
    VIT_PAYMENTREQDCollection: collection.map((item, idx) => ({
      DocEntry: null,
      LineId: idx + 1,
      VisOrder: idx,
      Object: "UDO_PAY_REQ",
      LogInst: null,
      U_INVOICENO: item.invoiceNo,
      U_INVOICEAMT: Number(item.invoiceAmount) || 0,
      U_CASHDISC: Number(item.cashDisc) || 0,
      U_PAYMENTAMT: Number(item.paymentAmount) || 0,
      U_ACCOUNTCODE: item.accNo || null,
      U_ACCOUNTNM: item.accName || null,
      U_VENDORREFNO: item.vendorRef || null,
      U_INVDUEDATE: item.invoiceDue || null,
      U_INVOICEENTRY: item.invoiceEntry || null,
      U_INVOICETYPE: item.invType || null,
      U_INVOICECURR: item.invoiceCurr || null,
      U_PLANT: item.plant || null,
      U_MESIN: item.mesin || null,
      U_DEPT: item.dept || null,
      U_REMARK: item.remarkDetail || null,
      U_PROJECT: item.proj || null,
      U_D4: item.d4 || null,
      U_D5: item.d5 || null,
      U_WTAX: Number(item.wTaxAmount) || 0,
      U_FPK: item.noFPK || null,
    })),
  }
}